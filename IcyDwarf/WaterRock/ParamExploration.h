/*
 * ParamExploration.h
 *
 *  Created on: Jan 27, 2015
 *      Author: Marc Neveu (mneveu@asu.edu)
 *
 *      Explore the geochemistry of water-rock interactions using the IPHREEQC module to run batch PHREEQC simulations.
 *
 *      Reference: Charlton & Parkhurst (2011), Computer & Geosciences 37, 1653-1663.
 */

#ifndef PARAMEXPLORATION_H_
#define PARAMEXPLORATION_H_

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <IPhreeqc.h>

#include "/usr/local/lib/gcc/x86_64-apple-darwin14.0.0/5.0.0/include/omp.h"
#include "../IcyDwarf.h"

int ParamExploration(char path[1024]);

int EHandler(int phreeqc);

int ExtractWrite(int instance, int nvar, double** data);

const char* ConCat(const char *str1, const char *str2);

int WritePHREEQCInput(const char *TemplateFile, double temp, double pressure, double pH, double pe, double WR, char *tempinput[1024]);

int ParamExploration(char path[1024]) {

	int thread_id;
	int phreeqc = 0;
	int nvar = 100;                                              // Number of variables stored in each PHREEQC simulation
	int i = 0;
	int j = 0;

	int itemp = 0;
	int iPressure = 0;
	int ipH = 0;
	int ipe = 0;
	int iWR = 0;

	int nTempIter = 0;
	int nPressureIter = 0;
	int npHiter = 0;
	int npeIter = 0;
	int nWRiter = 0;

	double T = 0.0;
	double P = 0.0;												 // Pressure (bar)
	double pH = 0.0;
	double pe = 0.0;
	double WR = 0.0;											 // Water:rock ratio by mass

	char *tempinput = (char*)malloc(1024);

	double Tmax = 151.0;
	double Tmin = 0.1;
	double Tstep = 50.0;

	double Pmax = 200.0;
	double Pmin = 200.0;
	double Pstep = 200.0;

	double pHmax = 13.0;
	double pHmin = 13.0;
	double pHstep = 2.0;

	double pemax = 0.0;
	double pemin = 0.0;
	double pestep = 2.0;

	double WRmax = 10.0;										 // Max water:rock ratio by mass
	double WRmin = 1;										 // Min water:rock ratio by mass
	double WRstep = 10.0;										 // Step (multiplicative) in water:rock ratio

	int nsim = 0;												 // Number of PHREEQC simulations

	char *dbase = (char*)malloc(1024);                           // Path to thermodynamic database
	char *infile = (char*)malloc(1024);                          // Path to initial input file

	VAR v;
	int nloops = 0;
	double FMQ = 0.0;

	//-------------------------------------------------------------------
	//                         Initializations
	//-------------------------------------------------------------------

	nTempIter = floor((Tmax-Tmin)/Tstep);
	nPressureIter = floor((Pmax-Pmin)/Pstep);
	npHiter = floor((pHmax-pHmin)/pHstep);
	npeIter = floor((pemax-pemin)/pestep);
	nWRiter = ceil((log(WRmax)-log(WRmin))/log(WRstep));

	nsim = (1 + nTempIter)*(1 + nPressureIter)*(1 + npHiter)*(1 + npeIter)*(1 + nWRiter);

	double **simdata = (double**) malloc(nsim*sizeof(double*));  // Compilation of data generated by multiple PHREEQC simulations
	if (simdata == NULL) printf("ParamExploration: Not enough memory to create simdata[nsim]\n");
	for (i=0;i<nsim;i++) {
		simdata[i] = (double*) malloc(nvar*sizeof(double));
		if (simdata[i] == NULL) printf("Thermal: Not enough memory to create simdata[nsim][nvarss]\n");
	}
	for (i=0;i<nsim;i++) {
		for (j=0;j<nvar;j++) {
			simdata[i][j] = 0.0;
		}
	}

	tempinput[0] = '\0';
	dbase[0] = '\0';
	infile[0] = '\0';

	if (v_release == 1) {
		dbase = path;
		strncat(dbase,path,strlen(path)-16);
	}
	else if (cmdline == 1) {
		dbase = path;
		strncat(dbase,path,strlen(path)-18);
	}
	else strncat(dbase,path,strlen(path)-16);
	strcat(dbase,"PHREEQC-3.1.2/core3.dat");

	strncat(infile,dbase,strlen(dbase)-9);
	strcat(infile,"io/inputIcyDwarf");

//#pragma omp parallel private(thread_id, phreeqc, T, P, pH, pe, WR, v, nloops, iWR, itemp)
//  {

	FMQ = -11.18;
	T = Tmin;
	P = Pmin;
	pH = pHmin;
	pe = pemin;
	nloops = 0;

//	thread_id = omp_get_thread_num();

//#pragma omp for
	for (itemp=0;itemp<=nTempIter;itemp++) {
		// Run PHREEQC
		phreeqc = CreateIPhreeqc();
		if (LoadDatabase(phreeqc,dbase) != 0) OutputErrorString(phreeqc);
		SetSelectedOutputFileOn(phreeqc,1);
		T = Tmin + Tstep*(double) itemp;
		WR = WRmax;

		for(iWR=0;iWR<=nWRiter;iWR++) { // Using log because of multiplicative step. log ratio = ln ratio.
			WritePHREEQCInput(infile, T, P, pH, FMQ+pe, WR, &tempinput);

			if (RunFile(phreeqc,tempinput) != 0) OutputErrorString(phreeqc);

//#pragma omp critical
//			{
			simdata[itemp+iWR*(nTempIter+1)][1] = P;
			//ExtractWrite(phreeqc, nvar, &simdata[itemp+iWR*(nTempIter+1)]);

			VarInit(&v);
			GetSelectedOutputValue(phreeqc,1,3,&v);           // temp
			if (fabs(v.dVal) < 1e-50) simdata[itemp+iWR*(nTempIter+1)][0] = 0.0;
			else simdata[itemp+iWR*(nTempIter+1)][0] = v.dVal;

			GetSelectedOutputValue(phreeqc,1,1,&v);           // pH
			if (fabs(v.dVal) < 1e-50) simdata[itemp+iWR*(nTempIter+1)][2] = 0.0;
			else simdata[itemp+iWR*(nTempIter+1)][2] = v.dVal;

			GetSelectedOutputValue(phreeqc,1,2,&v);           // pe
			if (fabs(v.dVal) < 1e-50) simdata[itemp+iWR*(nTempIter+1)][3] = 0.0;
			else simdata[itemp+iWR*(nTempIter+1)][3] = v.dVal;

			GetSelectedOutputValue(phreeqc,1,5,&v);           // W:R
			if (fabs(v.dVal) < 1e-50) simdata[itemp+iWR*(nTempIter+1)][4] = 0.0;
			else simdata[itemp+iWR*(nTempIter+1)][4] = v.dVal;

			for (j=1;j<nvar-4;j++) {                           // Rest of parameters
				GetSelectedOutputValue(phreeqc,2,j,&v);
				if (fabs(v.dVal) < 1e-50) simdata[itemp+iWR*(nTempIter+1)][j+4] = 0.0;
				else simdata[itemp+iWR*(nTempIter+1)][j+4] = v.dVal;
			}
//			}
			WR = WR/WRstep;
		}

		if (DestroyIPhreeqc(phreeqc) != IPQ_OK) OutputErrorString(phreeqc);
		++nloops;
		//T = T + Tstep;
	}
//	thread_id = omp_get_thread_num();
//	printf("Thread %d performed %d iterations of the loop.\n", thread_id, nloops);
//
//  } // Rejoin threads

	// Write output
	create_output(path, "Outputs/ParamExploration.txt");
	for(i=0;i<nsim;i++) {
		append_output(nvar, simdata[i], path, "Outputs/ParamExploration.txt");
	}

	// Free mallocs
	for(i=0;i<nsim;i++) free(simdata[i]);
	free(simdata);
	free(infile);
	free(dbase);
	free(tempinput);

	return 0;
}

/*--------------------------------------------------------------------
 *
 * Subroutine EHandler
 *
 * Error handler from Charlton & Parkhurst (2011), Computer &
 * Geosciences 37, 1653-1663.
 *
 *--------------------------------------------------------------------*/
int EHandler(int instance) {
	OutputErrorString(instance);
	// exit(EXIT_FAILURE);
	return 0;
}

/*--------------------------------------------------------------------
 *
 * Subroutine ExtractWrite
 *
 * Write selected output from PHREEQC
 *
 *--------------------------------------------------------------------*/
int ExtractWrite(int instance, int nvar, double** data) {
	VAR v;
	int i = 0;
	VarInit(&v);

	GetSelectedOutputValue(instance,1,3,&v);           // temp
	(*data)[0] = v.dVal;

	GetSelectedOutputValue(instance,1,1,&v);           // pH
	(*data)[2] = v.dVal;

	GetSelectedOutputValue(instance,1,2,&v);           // pe
	(*data)[3] = v.dVal;

	GetSelectedOutputValue(instance,1,5,&v);           // W:R
	(*data)[4] = v.dVal;

	for (i=1;i<nvar-4;i++) {                           // Rest of parameters
		GetSelectedOutputValue(instance,2,i,&v);
		if (fabs(v.dVal) < 1e-50) (*data)[i+4] = 0.0;
		else (*data)[i+4] = v.dVal;
	}
	return 0;
}

/*--------------------------------------------------------------------
 *
 * Subroutine ConCat
 *
 * Concatenation. Takes 2 strings and returns the concatenated string.
 *
 *--------------------------------------------------------------------*/
const char* ConCat(const char *str1, const char *str2) {
	char buffer[100];
	buffer[0] = '\0';

	strcpy(buffer,str1);
	return strcat(buffer,str2);
}

/*--------------------------------------------------------------------
 *
 * Subroutine ChangePHREEQCInput
 *
 * Generate input file from a template.
 * Modifies P, T, pH, pe, W:R
 *
 *--------------------------------------------------------------------*/
int WritePHREEQCInput(const char *TemplateFile, double temp, double pressure, double pH, double pe, double WR, char **tempinput) {

	// Open input file
	FILE *fin;
	FILE *fout;
	char temp_str[10];
	char pressure_str[10];
	char pH_str[10];
	char pe_str[10];
	char WR_str[10];
	temp_str[0] = '\0';
	pressure_str[0] = '\0';
	pH_str[0] = '\0';
	pe_str[0] = '\0';
	WR_str[0] = '\0';
	int line_length = 300;
	char line[line_length]; // Individual line
	int line_no = 0; // Line number

	sprintf(temp_str,"%g",temp);
	sprintf(pressure_str,"%g",pressure);
	sprintf(pH_str,"%g",pH);
	sprintf(pe_str,"%g",pe);
	sprintf(WR_str,"%g",WR);

	strcpy(*tempinput,TemplateFile);
	strcat(*tempinput,"T");
	strcat(*tempinput,temp_str);
	strcat(*tempinput,"P");
	strcat(*tempinput,pressure_str);
	strcat(*tempinput,"pH");
	strcat(*tempinput,pH_str);
	strcat(*tempinput,"pe");
	strcat(*tempinput,pe_str);
	strcat(*tempinput,"WR");
	strcat(*tempinput,WR_str);

	fin = fopen (TemplateFile,"r");
	if (fin == NULL) printf("ParamExploration: Missing input file.\n");
	fout = fopen (*tempinput,"w");
	if (fin == NULL) printf("ParamExploration: Missing output file.\n");

	while (fgets(line, line_length, fin)) {
		line_no++;
		if (line_no == 5) fputs(ConCat(ConCat("\t pH \t \t",pH_str),"\n"),fout);
		else if (line_no == 6) fputs(ConCat(ConCat("\t temp \t \t",temp_str),"\n"),fout);
		else if (line_no == 7) fputs(ConCat(ConCat("\t pressure \t",pressure_str),"\n"),fout);
		else if (line_no == 8) fputs(ConCat(ConCat("\t pe \t \t",pe_str),"\n"),fout);
		else if (line_no == 9) fputs(ConCat(ConCat("\t -water \t",WR_str),"\n"),fout);
		else fputs(line,fout);
	}
	if (ferror(fin)) {
		printf("ParamExploration: Error reading template input file %s\n",TemplateFile);
		return 1;
	}

	fclose(fin);
	fclose(fout);

	return 0;
}

#endif /* PARAMEXPLORATION_H_ */
